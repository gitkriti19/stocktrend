# -*- coding: utf-8 -*-
"""stonks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B0T4-GktJ0-ujIGYyZPPEtefz-KT8KdM
"""

#Import the libraries
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
from pandas_datareader import data as pdr
import yfinance as yf
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# #Get the stock quote
# df = yf.download('AAPL', start = '2012-01-01', end='2019-12-17')

# df
# #df = data


import yfinance as yf
df = yf.download('INFY', start = '2012-01-01', end='2023-06-17')

df.head

df.tail

#get number of rows and columns
df.shape

#visualise closing price history
plt.figure(figsize=(12,4))
plt.title('Close Prize History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.show()

ma100 = df.Close.rolling(100).mean()
ma100

plt.figure(figsize=(12,4))
plt.plot(df.Close)
plt.plot(ma100, 'r')

#Create a new dataframe with only the 'Close column
data = df.filter (['Close'])
#Convert the dataframe to a numpy array
dataset = data.values
#Get the number of rows to train the model on
import math
training_data_len = math.ceil(len (dataset) * .8 )
training_data_len

#scale the data
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

#create the training data set
#create scaled training data set
train_data = scaled_data[0:training_data_len , :]
#split the data into x_train and y_train data sets
x_train = [] #past values
y_train = [] #the value we want to predict

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

#conver xtrain and ytrain dataset to numpy array
x_train, y_train = np.array(x_train), np.array(y_train)

#reshape
import numpy as np
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#build lstm model
model = Sequential()
model.add(LSTM(50, return_sequences = True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences = False))
model.add(Dense(25))
model.add(Dense(1))

#compile model
model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(x_train, y_train, batch_size=1, epochs=1)

model.save('keras_model.h5')

#create testing data set
#create a new array containing scaled vlues from 1543 to 2003
test_data = scaled_data[training_data_len - 60: , :]
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#convert data to numpy array
x_test = np.array(x_test)

#reshape
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#get predicted values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#get root means square error RMSE
rmse = np.sqrt( np.mean( predictions - y_test)**2)
rmse

#plot data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#visiualize
plt.figure(figsize=(12,4))
plt.title('Model')
plt.xlabel('Data', fontsize=18)
plt.ylabel('Close Price USD', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc = 'lower right')
plt.show()

#show valid and predicted price
valid

# from sys import last_traceback
#get the quote
import yfinance as yf

apple_quote = yf.download('INFY', start='2012-01-01', end='2022-12-17')

# df = yf.download('AAPL', start = '2012-01-01', end='2019-12-17')
#create new dataframe
new_df = apple_quote.filter(['Close'])
#last 60 days cp and convert dataframe to np array
last_60_days = new_df[-60:].values
#scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)
#create an empty list
X_test = []
#append the past 60 dys
X_test.append(last_60_days_scaled)
#convert Xtest to numpy array
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
pred_price = model.predict(X_test)
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)
#visualise
# plt.figure(figsize=(12,4))
# plt.title('Model')
# plt.xlabel('Data', fontsize=18)
# plt.ylabel('Close Price USD', fontsize=18)
# plt.plot(pred_price)
# plt.show()

import yfinance as yf

apple_quote2 = yf.download('INFY', start='2023-01-01', end='2023-01-01')
print(apple_quote2['Close'])

import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

# Assuming you have the historical data stored in a DataFrame called 'stock_data'
# Make sure the 'Date' column is of type datetime
import yfinance as yf
df = yf.download('INFY', start = '2012-01-01', end='2023-06-17')

df.columns
df

import yfinance as yf
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

df = yf.download('INFY', start='2012-01-01', end='2023-06-17')

# Reset the index
df.reset_index(inplace=True)

# Convert the index to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Extract the 'Date' and 'Close' columns
data = df[['Date', 'Close']].copy()

# Split the data into training and testing sets
train_data = data[data['Date'] < '2024-01-01']
test_data = data[data['Date'] >= '2024-01-01']

train_data['Close'] = pd.to_numeric(train_data['Close'], errors='coerce')


# Create the ARIMA model and fit it to the training data
model = ARIMA(train_data['Close'], order=(1, 1, 1))
model_fit = model.fit()

# Forecast future prices for 2024 and 2025
forecast = model_fit.get_forecast(steps=2)
forecast_values = forecast.predicted_mean

# Create a DataFrame for the forecasted prices
forecasted_data = pd.DataFrame({'Date': pd.to_datetime(['2024-01-01', '2025-01-01']), 'Close': forecast})

# Combine the training and forecasted data
combined_data = pd.concat([data, forecasted_data])

# Convert 'Close' column to numeric type
combined_data['Close'] = pd.to_numeric(combined_data['Close'], errors='coerce')

# Separate actual prices from predicted values
actual_data = combined_data.loc[combined_data['Close'].notnull()]
predicted_data = combined_data.loc[combined_data['Close'].isnull()]

# Plot actual prices and predicted values
plt.figure(figsize=(12, 4))
plt.plot(actual_data['Date'], actual_data['Close'], label='Actual')
plt.scatter(predicted_data['Date'], predicted_data['Close'], color='red', label='Predicted')
plt.title('Stock Prices')
plt.xlabel('Date')
plt.ylabel('Closing Price')
plt.legend()
plt.show()
